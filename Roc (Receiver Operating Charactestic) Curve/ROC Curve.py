# -*- coding: utf-8 -*-
"""Practical - 4 ROC Curve.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pYbIc5qztJRxAlgdT3W-A-1ZtlLg9wnR
"""

import numpy as np
import pandas as pd
from sklearn.datasets import fetch_california_housing
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score, precision_score, f1_score, roc_curve, auc,confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns

# Load the California housing dataset
ch = fetch_california_housing()
data = pd.DataFrame(ch.data, columns=ch.feature_names)
data['Price'] = ch.target

data.head()

data.head(15)

data.head(487)

data.info()

data.shape

data.describe()

# Convert the regression problem into a binary classification problem
data['Target'] = (data['Price'] > 2.0).astype(int)  # Binary classification based on a threshold

x = data.drop(['Price', 'Target'], axis=1)
y = data['Target']

# Split the data into training and testing sets
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)

# Standardize the features
scaler = StandardScaler()
xt_scaled = scaler.fit_transform(x_train)
xte_scaled = scaler.transform(x_test)

# Train a logistic regression model
mdl = LogisticRegression()
mdl.fit(xt_scaled, y_train)

# Predictions
y_pred_proba = mdl.predict_proba(xte_scaled)[:, 1]
y_pred = (y_pred_proba > 0.5).astype(int)

# Confusion matrix
conf_matrix = confusion_matrix(y_test, y_pred)

# Plot confusion matrix using seaborn heatmap
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', cbar=False)
plt.xlabel('Predicted Labels')
plt.ylabel('True Labels')
plt.title('Confusion Matrix')
plt.show()

# Calculate classification metrics
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred)
f1 = f1_score(y_test, y_pred)

# Plot ROC curve
fpr, tpr, thresholds = roc_curve(y_test, y_pred_proba)
roc_auc = auc(fpr, tpr)

plt.plot(fpr, tpr, color='darkorange', lw=2, label=f'ROC curve (AUC = {roc_auc:.2f})')
plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('Receiver Operating Characteristic (ROC) Curve')
plt.legend()
plt.show()

# Print metrics
print(f'Accuracy: {accuracy:.2f}')
print(f'Precision: {precision:.2f}')
print(f'F-1 Score: {f1:.2f}')